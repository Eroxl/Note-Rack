import { MilvusClient, DataType } from "@zilliz/milvus2-sdk-node";

if (!process.env.MILVUS_URL) {
  throw new Error('MILVUS_URL is not defined');
}

const EMBEDDING_DIM = 1536;

const BLOCK_FIELDS = [
  {
    name: 'block_id',
    description: 'The ID of the block (Same as the ID of the block in mongoDB)',
    data_type: DataType.VarChar,
    max_length: 24,
    is_primary_key: true,
  },
  {
    name: 'page_id',
    description: 'The ID of the page that the block belongs to',
    max_length: 24,
    data_type: DataType.VarChar,
  },
  {
    name: 'embedding',
    description: 'The embedding of the block (Generated by OpenAI)',
    data_type: DataType.FloatVector,
    dim: EMBEDDING_DIM,
  },
  {
    name: 'content',
    description: 'The content of the block',
    data_type: DataType.VarChar,
    max_length: 1000,
  },
  {
    name: 'context',
    description: 'The context of the block',
    data_type: DataType.VarChar,
    max_length: (24 + 2) * 11 + 2,
  }
]

const milvusClient = new MilvusClient(
  process.env.MILVUS_URL,
  true,
  process.env.MILVUS_USERNAME,
  process.env.MILVUS_PASSWORD
);

(async () => {
  const doesCollectionExist = await milvusClient.hasCollection({
    collection_name: 'blocks',
  });
  
  if (doesCollectionExist.status.error_code !== 'Success') {
    throw new Error(doesCollectionExist.status.reason);
  }

  if (doesCollectionExist.value) return;

  await milvusClient.createCollection({
    collection_name: 'blocks',
    description: 'Collection for storing block embeddings',
    fields: BLOCK_FIELDS,
  });

  await milvusClient.createIndex({
    collection_name: 'blocks',
    field_name: 'embedding',
    index_type: 'AUTOINDEX',
    index_name: 'embedding_index',
    metric_type: 'L2',
  });
})();

export default milvusClient;
